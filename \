#include <iostream>
#include <raylib.h>
#include <raymath.h>
#include <rlgl.h>

#include "./render/guy.h"

int main(int argc, char *argv[]) {
    InitWindow(1280, 720, "chlorophyll");

    Camera3D camera;
    camera.position = {20.0f, 4.0f, 0};
    camera.target = {};
    camera.up = {0.0f, 1.0f, 0.0f};
    camera.fovy = 30.0f;
    camera.projection = CAMERA_PERSPECTIVE;

    RenderGuy rg;

    auto bridget = rg.add_texture("./data/textures/bridget.jpg");
    Sprite bgs;
    bgs.texture = bridget;
    bgs.source_anchor = {};
    bgs.source_size = {1024, 1024};
    bgs.origin = {512, 0};
    bgs.horizontal_frames = 2;
    bgs.vertical_frames = 2;

    while (!WindowShouldClose()) {
        const float delta = GetFrameTime();
        BeginDrawing();
        ClearBackground(RAYWHITE);

        std::vector<Vector3> character_positions = {
            {-6, 0, +2}, {-4, 0, +6}, {+6, 0, +2}, {+4, 0, +6},
            {-6, 0, -2}, {-4, 0, -6}, {+6, 0, -2}, {+4, 0, -6},
        };

        {
            BeginMode3D(camera);
            DrawGrid(64, 1.0f);

            for (const auto &cp : character_positions) {
                draw_billboard(camera, bgs, 0, cp, {2, 2}, 0);
            }

            EndMode3D();
        }

        {
            for (int i = 0; i < character_positions.size(); ++i) {
                for (int j = i + 1; j < character_positions.size(); ++j) {
                    if (j != i + 4) {
                        continue;
                    }
                    const Vector2 from = GetWorldToScreen(
                        character_positions[i] + Vector3{0, 2.5, 0}, camera);
                    const Vector2 to = GetWorldToScreen(
                        character_positions[j] + Vector3{0, 2.5, 0}, camera);
                    const Vector2 middle =
                        Vector2Lerp(from, to, .5) + Vector2{0, -100};
                    const std::vector<Vector2> controls = {from, middle, to};
                    DrawSplineBezierQuadratic(controls.data(), controls.size(),
                                              16, ORANGE);
                    DrawSplineBezierQuadratic(controls.data(), controls.size(),
                                              12, YELLOW);
                }
            }
        }

        {
            DrawRectangleRec(
                Rectangle{0, static_cast<float>(GetScreenHeight() - 160),
                          static_cast<float>(GetScreenWidth()), 80},
                BLUE);
            for (int i = 0; i < 12; ++i) {
                DrawRectangleRec(
                    Rectangle{50 + static_cast<float>((80 + 20) * i),
                              static_cast<float>(GetScreenHeight() - 160), 80,
                              80},
                    GREEN);
            }
        }

        EndDrawing();
    }
    CloseWindow();
    return 0;
}
